image: node:10.19.0-alpine@sha256:5498d6cb4d240644bfbef7de4a0b61769cc0ebc31a34183512bdfd0f73cf3692

.executor-docker: &executor-docker
  tags:
    - docker

.not-branches: &not-branches
  only:
    - master
    - next-5.x
    - tags
    - develop

stages:
  - build
  - compliance
  - security-tests
  - unit-tests
  - quality-tests
  - reporting

npm:
  stage: build
  <<: *executor-docker
  script:
    - npm i --no-save --no-optional
    - npm dedupe
  artifacts:
    expire_in: 60 mins
    paths:
      - ./dist
      - ./node_modules
      - ./package-lock.json

eslint:
  stage: compliance
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm run compliance:lint

coverage:
  stage: unit-tests
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm run tests:coverage
  artifacts:
    expire_in: 60 mins
    paths:
      - ./.coverage

sonar-scanner:
  stage: quality-tests
  <<: *executor-docker
  <<: *not-branches
  image: "$CI_REGISTRY/engineering-practice/sonar-scanner:latest"
  dependencies:
    - coverage
  script:
    - 'sonar-scanner -Dsonar.projectBaseDir="$CI_PROJECT_DIR"'

sensitives:
  stage: security-tests
  <<: *executor-docker
  script:
    - apk add git
    - eval "git log -p | grep ${LOG_SCAN_QUERY}" && exit 1 || exit 0

dep-vuln:
  stage: security-tests
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm run security:audit

checkmarx:
  stage: security-tests
  image: docker:latest@sha256:bc7f740e2c0a8a9ec43b009b7cd35aafb10e69488a017110ad723003fbd3a7ae
  services:
    - docker:dind@sha256:5b45c3565b02cb453fc0ef33e3d082006293d5d002d9cfd06d6ff290724c2d37
  tags:
    - transparent-docker-in-docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - apk add jq
    - mkdir -p .checkmarx/ && chmod 0777 .checkmarx/
    - |
      docker run --rm \
      -v $(pwd):/home/checkmarx/src:ro -v $(pwd)/.checkmarx:/home/checkmarx/src/.checkmarx:rw \
      -e CHECKMARX_REPORT_FORMAT=PDF \
      $CI_REGISTRY/engineering-practice/checkmarx-cli:latest \
      checkmarx ${CI_PROJECT_NAME}@${CI_PROJECT_NAMESPACE}#${CI_COMMIT_REF_NAME} Engineering
    - cat .checkmarx/checkmarx.json
    - breach=$(cat .checkmarx/checkmarx.json | jq ".vulnerability_counts.high + .vulnerability_counts.medium > 0")
    - if [ "$breach" != "false" ]; then exit 1; fi
  artifacts:
    when: always
    expire_in: 30 mins
    paths:
      - .checkmarx/
  <<: *not-branches
  allow_failure: false

outdated:
  stage: security-tests
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm outdated
  allow_failure: true

